name: Backend-CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions: write-all

jobs:
  lint:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 autopep8
      - name: Run autopep8
        run: |
          autopep8 --in-place --aggressive --aggressive -r src/
      - name: Run flake8
        run: flake8 src/
      - name: Commit fixed files
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add .
          git commit -m "Apply autopep8 fixes" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:9
        env:
          MYSQL_DATABASE: smcs
          MYSQL_USER: yoyo
          MYSQL_PASSWORD: Yoyo_200181
          MYSQL_ROOT_PASSWORD: Yoyo_200181
        ports:
            - 3306:3306
        options: >
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - name: Pull MySQL image
        run: docker pull mysql:9
      - name: Debug MySQL container
        run: |
          echo "Listing all containers:"
          docker ps -a
          echo "MySQL container logs:"
          docker logs $(docker ps -a -q --filter "label=9ead93") || echo "No MySQL container found"
          echo "Network inspection:"
          docker network ls
          docker network inspect github_network_$(docker ps -a -q --filter "label=9ead93" --format "{{.Networks}}") || echo "Network inspection failed"
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: install dependencies
        run: |
          apt-get update && apt-get install -y --no-install-recommends \
            gcc \
            python3-dev \
            pkg-config \
            libmariadb-dev-compat \
            libmariadb-dev \
            build-essential
          pip install -r src/requirements.txt
      - name: Wait for MySQL
        env:
            MYSQL_PWD: Yoyo_200181
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h mysql -u yoyo --silent; then
              echo "MySQL is up on host 'mysql'!"
              break
            fi
            echo "Waiting for MySQL on host 'mysql'... ($i/60)"
            if mysqladmin ping -h 127.0.0.1 -u yoyo --silent; then
              echo "MySQL is up on host '127.0.0.1'!"
              export MYSQL_HOST=127.0.0.1
              break
            fi
            echo "Waiting for MySQL on host '127.0.0.1'... ($i/60)"
            sleep 2
          done
          if [ $i -eq 60 ]; then
            echo "Error: MySQL did not start in time"
            docker logs $(docker ps -a -q --filter "label=9ead93")
            exit 1
          fi
      - name: run django test
        env:
          MYSQL_DATABASE: smcs
          MYSQL_USER: yoyo
          MYSQL_PASSWORD: Yoyo_200181
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          SECRET_KEY: 87c7e33518d2fef1fb200e2ff34579362a3e5bad3bcb8aa1
          DEBUG: True
        run: |
          python src/manage.py test
  
  build:
    runs-on: ubuntu-latest
    container: docker:20.10.24
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t yoyo200181/smcs:v1.0 .
          docker push yoyo200181/smcs:v1.0
  
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         port: ${{ secrets.SERVER_PORT}}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SERVER_SSHKEY }}
  #         script: |
  #           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
  #           docker pull yoyo200181/smcs:v1.0
  #           cd ${{ secrets.SERVER_PROJECT_PATH}}
  #           docker-compose up -d